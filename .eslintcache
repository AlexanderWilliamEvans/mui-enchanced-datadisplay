[{"C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\reportWebVitals.js":"1","C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\App.js":"2","C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\components\\examples\\example.js":"3","C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\components\\examples\\table\\table.js":"4","C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\components\\querybar\\Querybar.js":"5","C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\components\\querybar\\filter\\FilterMenu.js":"6","C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\index.js":"7"},{"size":362,"mtime":1609317211589,"results":"8","hashOfConfig":"9"},{"size":189,"mtime":1609317932900,"results":"10","hashOfConfig":"9"},{"size":1542,"mtime":1609336829657,"results":"11","hashOfConfig":"9"},{"size":1666,"mtime":1609321341203,"results":"12","hashOfConfig":"9"},{"size":6036,"mtime":1609323681344,"results":"13","hashOfConfig":"9"},{"size":13505,"mtime":1609319425535,"results":"14","hashOfConfig":"9"},{"size":500,"mtime":1609317211589,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g00r6c",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\reportWebVitals.js",[],"C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\App.js",[],"C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\components\\examples\\example.js",["31"],"C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\components\\examples\\table\\table.js",["32","33"],"C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\components\\querybar\\Querybar.js",["34","35","36","37","38","39","40","41","42","43","44"],"C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\components\\querybar\\filter\\FilterMenu.js",["45","46","47","48","49","50","51","52","53","54","55","56","57"],"import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport {\r\n    makeStyles,\r\n    withStyles,\r\n    useTheme,\r\n    Grid,\r\n    RadioGroup,\r\n    Radio,\r\n    InputLabel,\r\n    Slider,\r\n    Typography,\r\n    TextField,\r\n    FormLabel,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Divider,\r\n    Chip,\r\n    MenuItem,\r\n    Input,\r\n    Select\r\n} from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    buttonGroup: {\r\n        padding: theme.spacing(1),\r\n        borderBottom: '1px solid #ccc',\r\n        height: '75px'\r\n    },\r\n    filterContainer: {\r\n        padding: theme.spacing(2),\r\n        borderBottom: '1px solid #ccc'\r\n    },\r\n    rangeSlider: {\r\n        marginTop: '2.5em'\r\n    },\r\n    datecontainer: {\r\n  \r\n    },\r\n    datefield: {\r\n      margin: theme.spacing(1)\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    chipformControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 150,\r\n        maxWidth: 400,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        maxWidth: 300,\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    chipContainer: {\r\n        border: '1px solid #ccc',\r\n        padding: theme.spacing(1),\r\n        minWidth: 500,\r\n        maxWidth: 500,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n    },\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n    noLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nconst RangeSlider = withStyles({\r\n    root: {\r\n        color: 'primary',\r\n        height: 2,\r\n        padding: '15px 0',\r\n    },\r\n    thumb: {\r\n        height: 25,\r\n        width: 25,\r\n        backgroundColor: '#fff',\r\n        boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)',\r\n        marginTop: -14,\r\n        marginLeft: -14,\r\n        '&:focus, &:hover, &$active': {\r\n            boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\r\n            '@media (hover: none)': {\r\n                boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)',\r\n            },\r\n        },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n        left: 'calc(-50% + 12px)',\r\n        top: -22,\r\n        '& *': {\r\n            background: 'transparent',\r\n            color: '#000',\r\n        },\r\n    },\r\n    track: {\r\n        height: 2,\r\n    },\r\n    rail: {\r\n        height: 2,\r\n        opacity: 0.5,\r\n        backgroundColor: '#bfbfbf',\r\n    },\r\n    mark: {\r\n        backgroundColor: '#bfbfbf',\r\n        height: 8,\r\n        width: 1,\r\n        marginTop: -3,\r\n    },\r\n    markActive: {\r\n        opacity: 1,\r\n        backgroundColor: 'currentColor',\r\n    },\r\n})(Slider);\r\n\r\nconst FilterMenu = (props) => {\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const [published, setPublished] = useState('all');\r\n    const [creators, setCreators ] = useState([{name: 'SOKIGO/ALEV', id: 66}, {name: 'SOKIGO/HEAN', id: 662}, {name: 'SOKIGO/FRLU', id: 3}]);\r\n    const [selectedCreators, setSelectedCreators] = useState(creators);\r\n    const [updatedTimePeriod, setUpdatedTimePeriod] = useState({\r\n        start: new Date(new Date().setFullYear(new Date().getFullYear() - 5)).toISOString().slice(0, 10),\r\n        end: new Date().toISOString().slice(0, 10)\r\n      });\r\n    const [createdTimePeriod, setCreatedTimePeriod] = useState({\r\n        start: new Date(new Date().setFullYear(new Date().getFullYear() - 5)).toISOString().slice(0, 10),\r\n        end: new Date().toISOString().slice(0, 10)\r\n      });\r\n    const [activeFilters, setActiveFilters] = useState([\r\n        { name: 'status', active: false, filter: {} },\r\n        { name: 'created', active: false, filter: {} },\r\n        { name: 'updated', active: false, filter: {} },\r\n        { name: 'createdBy', active: false, filter: {} },\r\n    ]);\r\n    const activeFilterRef = useRef(activeFilters);\r\n\r\n\r\n    const getStyles = (name, personName, theme) => {\r\n        return {\r\n            fontWeight:\r\n                personName.indexOf(name) === -1\r\n                    ? theme.typography.fontWeightRegular\r\n                    : theme.typography.fontWeightMedium,\r\n        };\r\n    };\r\n\r\n\r\n    const filterPublished = (e) => {\r\n        debugger;\r\n        setPublished(e.target.value);\r\n        const data = {name: 'status', active: true, filter: e.target.value};\r\n        let newState = [...activeFilters];\r\n        newState[0] = data;\r\n        setActiveFilters(newState);\r\n    };\r\n\r\n    const handleTimeperiod = (e, period, type) => {\r\n        debugger;\r\n        let data;\r\n        let newState;\r\n        switch(type) {\r\n          case 'created': \r\n            switch(period) {\r\n                case 'start':\r\n                    setCreatedTimePeriod({...createdTimePeriod, start: e.target.value});\r\n                    data = {name: 'created', active: true, filter: {start: e.target.value, end: createdTimePeriod.end}};\r\n                    newState = [...activeFilters];\r\n                    newState[1] = data;\r\n                    setActiveFilters(newState);\r\n                    break;\r\n                case 'end':\r\n                    setCreatedTimePeriod({...createdTimePeriod, end: e.target.value});\r\n                    data = {name: 'created', active: true, filter: {end: e.target.value, start: createdTimePeriod.start}};\r\n                    newState = [...activeFilters];\r\n                    newState[1] = data;\r\n                    setActiveFilters(newState);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            break;\r\n          case 'updated':\r\n              switch(period) {\r\n                case 'start':\r\n                    setUpdatedTimePeriod({...updatedTimePeriod, start: e.target.value});\r\n                    data = {name: 'updated', active: true, filter: {start: e.target.value, end: updatedTimePeriod.end}};\r\n                    newState = [...activeFilters];\r\n                    newState[2] = data;\r\n                    debugger;\r\n                    setActiveFilters(newState);\r\n                    break;\r\n                case 'end':\r\n                    setUpdatedTimePeriod({...updatedTimePeriod, end: e.target.value});\r\n                    data = {name: 'updated', active: true, filter: {end: e.target.value, start: updatedTimePeriod.start}};\r\n                    newState = [...activeFilters];\r\n                    newState[2] = data;\r\n                    setActiveFilters(newState);\r\n                    break;\r\n                default:\r\n                    break;\r\n              }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n    \r\n      };\r\n\r\n      const removeChip = (e) => {\r\n\r\n      };\r\n\r\n      const filterCreatedBy = () => {\r\n\r\n      };\r\n\r\n\r\n    const handleQuery = useCallback(() => {\r\n        props.handleQuery(activeFilters, 'filter');\r\n    }, [props, activeFilters]);\r\n\r\n    useEffect(() => {\r\n        if (JSON.stringify(activeFilterRef.current) !== JSON.stringify(activeFilters)) {\r\n            handleQuery(activeFilters, 'filter');\r\n            activeFilterRef.current = activeFilters;\r\n        }\r\n    }, [activeFilters, handleQuery]);\r\n\r\n    return (\r\n        <div className={classes.filterContainer}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={6}>\r\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                        <FormLabel component=\"legend\">Status</FormLabel>\r\n                        <Divider />\r\n                        <RadioGroup aria-label=\"published\" name=\"published\" value={published} onChange={(e) => { filterPublished(e) }}>\r\n                            <FormControlLabel value=\"all\" control={<Radio color=\"primary\" />} label=\"Alla\" />\r\n                            <FormControlLabel value=\"published\" control={<Radio color=\"primary\" />} label=\"Publicerad\" />\r\n                            <FormControlLabel value=\"notPublished\" control={<Radio color=\"primary\" />} label=\"Inte Publicerad\" />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                <FormControl className={classes.chipformControl}>\r\n                        <InputLabel id=\"demo-mutiple-chip-label\">Skapad av</InputLabel>\r\n                        {/* <Select\r\n                            onMouseDown={(event) => {\r\n                                event.stopPropagation();\r\n                            }}\r\n                            labelId=\"demo-mutiple-chip-label\"\r\n                            id=\"demo-mutiple-chip\"\r\n                            multiple\r\n                            value={selectedCreators}\r\n                            onChange={(e) => filterCreatedBy(e)}\r\n                            input={<Input id=\"select-multiple-chip\" />}\r\n                            renderValue={(selected) => (\r\n                                <div className={classes.chips}>\r\n                                    {selected.map((value) => \r\n                                    (\r\n                                        <Chip\r\n                                            key={value}\r\n                                            label={value}\r\n                                            className={classes.chip}\r\n                                            clickable\r\n                                            color=\"primary\"\r\n                                            onDelete={(e) => removeChip(e, value)}\r\n                                            onMouseDown={(event) => {\r\n                                                event.stopPropagation();\r\n                                            }}\r\n                                        />\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                            MenuProps={MenuProps}\r\n                        >\r\n                            {creators.map((creator) => (\r\n                                <MenuItem key={creator.id} value={creator.name} style={getStyles(creator.name, selectedCreators, theme)}>\r\n                                    {creator.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select> */}\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <form className={classes.datecontainer} noValidate>\r\n                        <Typography variant=\"body2\">Updaterad</Typography>\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Från\"\r\n                            type=\"date\"\r\n                            onChange={(e) => handleTimeperiod(e, 'start', 'updated')}\r\n                            defaultValue={updatedTimePeriod.start}\r\n                            className={classes.datefield}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Till\"\r\n                            type=\"date\"\r\n                            onChange={(e) => handleTimeperiod(e, 'end', 'updated')}\r\n                            defaultValue={updatedTimePeriod.end}\r\n                            className={classes.datefield}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </form>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <form className={classes.datecontainer} noValidate>\r\n                        <Typography variant=\"body2\">Skapad</Typography>\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Från\"\r\n                            type=\"date\"\r\n                            onChange={(e) => handleTimeperiod(e, 'start', 'updated')}\r\n                            defaultValue={updatedTimePeriod.start}\r\n                            className={classes.datefield}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                        <TextField\r\n                            id=\"date\"\r\n                            label=\"Till\"\r\n                            type=\"date\"\r\n                            onChange={(e) => handleTimeperiod(e, 'end', 'updated')}\r\n                            defaultValue={updatedTimePeriod.end}\r\n                            className={classes.datefield}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FilterMenu;","C:\\Users\\alev\\Hackaton\\mui-enchanced-datadisplay\\src\\index.js",[],{"ruleId":"58","severity":1,"message":"59","line":19,"column":7,"nodeType":"60","messageId":"61","endLine":19,"endColumn":13},{"ruleId":"58","severity":1,"message":"62","line":17,"column":7,"nodeType":"60","messageId":"61","endLine":17,"endColumn":17},{"ruleId":"58","severity":1,"message":"63","line":25,"column":16,"nodeType":"60","messageId":"61","endLine":25,"endColumn":23},{"ruleId":"58","severity":1,"message":"64","line":3,"column":23,"nodeType":"60","messageId":"61","endLine":3,"endColumn":33},{"ruleId":"58","severity":1,"message":"65","line":4,"column":16,"nodeType":"60","messageId":"61","endLine":4,"endColumn":32},{"ruleId":"58","severity":1,"message":"66","line":4,"column":34,"nodeType":"60","messageId":"61","endLine":4,"endColumn":43},{"ruleId":"58","severity":1,"message":"67","line":4,"column":45,"nodeType":"60","messageId":"61","endLine":4,"endColumn":50},{"ruleId":"58","severity":1,"message":"68","line":103,"column":10,"nodeType":"60","messageId":"61","endLine":103,"endColumn":19},{"ruleId":"58","severity":1,"message":"69","line":104,"column":18,"nodeType":"60","messageId":"61","endLine":104,"endColumn":27},{"ruleId":"58","severity":1,"message":"70","line":105,"column":16,"nodeType":"60","messageId":"61","endLine":105,"endColumn":23},{"ruleId":"58","severity":1,"message":"71","line":106,"column":23,"nodeType":"60","messageId":"61","endLine":106,"endColumn":37},{"ruleId":"58","severity":1,"message":"72","line":107,"column":10,"nodeType":"60","messageId":"61","endLine":107,"endColumn":16},{"ruleId":"58","severity":1,"message":"73","line":135,"column":9,"nodeType":"60","messageId":"61","endLine":135,"endColumn":15},{"ruleId":"58","severity":1,"message":"73","line":140,"column":9,"nodeType":"60","messageId":"61","endLine":140,"endColumn":15},{"ruleId":"58","severity":1,"message":"74","line":17,"column":5,"nodeType":"60","messageId":"61","endLine":17,"endColumn":9},{"ruleId":"58","severity":1,"message":"75","line":18,"column":5,"nodeType":"60","messageId":"61","endLine":18,"endColumn":13},{"ruleId":"58","severity":1,"message":"76","line":19,"column":5,"nodeType":"60","messageId":"61","endLine":19,"endColumn":10},{"ruleId":"58","severity":1,"message":"77","line":20,"column":5,"nodeType":"60","messageId":"61","endLine":20,"endColumn":11},{"ruleId":"58","severity":1,"message":"78","line":89,"column":7,"nodeType":"60","messageId":"61","endLine":89,"endColumn":16},{"ruleId":"58","severity":1,"message":"79","line":98,"column":7,"nodeType":"60","messageId":"61","endLine":98,"endColumn":18},{"ruleId":"58","severity":1,"message":"80","line":148,"column":11,"nodeType":"60","messageId":"61","endLine":148,"endColumn":16},{"ruleId":"58","severity":1,"message":"81","line":151,"column":22,"nodeType":"60","messageId":"61","endLine":151,"endColumn":33},{"ruleId":"58","severity":1,"message":"82","line":152,"column":12,"nodeType":"60","messageId":"61","endLine":152,"endColumn":28},{"ruleId":"58","severity":1,"message":"83","line":152,"column":30,"nodeType":"60","messageId":"61","endLine":152,"endColumn":49},{"ruleId":"58","severity":1,"message":"84","line":170,"column":11,"nodeType":"60","messageId":"61","endLine":170,"endColumn":20},{"ruleId":"58","severity":1,"message":"85","line":241,"column":13,"nodeType":"60","messageId":"61","endLine":241,"endColumn":23},{"ruleId":"58","severity":1,"message":"86","line":245,"column":13,"nodeType":"60","messageId":"61","endLine":245,"endColumn":28},"no-unused-vars","'filter' is assigned a value but never used.","Identifier","unusedVar","'createData' is assigned a value but never used.","'setRows' is assigned a value but never used.","'Typography' is defined but never used.","'FormControlLabel' is defined but never used.","'FormLabel' is defined but never used.","'Radio' is defined but never used.","'dataQuery' is assigned a value but never used.","'setFilter' is assigned a value but never used.","'setSort' is assigned a value but never used.","'setSortOptions' is assigned a value but never used.","'search' is assigned a value but never used.","'result' is defined but never used.","'Chip' is defined but never used.","'MenuItem' is defined but never used.","'Input' is defined but never used.","'Select' is defined but never used.","'MenuProps' is assigned a value but never used.","'RangeSlider' is assigned a value but never used.","'theme' is assigned a value but never used.","'setCreators' is assigned a value but never used.","'selectedCreators' is assigned a value but never used.","'setSelectedCreators' is assigned a value but never used.","'getStyles' is assigned a value but never used.","'removeChip' is assigned a value but never used.","'filterCreatedBy' is assigned a value but never used."]